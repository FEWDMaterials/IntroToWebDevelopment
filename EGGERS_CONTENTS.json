{"home":{"content":"# Intro to Web Development @c4q\n------\n\n## Important class links\n* **[Class notes on GitHub](https://github.com/mottaquikarim/c4qWebpage)**\n* **[GitBot](http://gitbot.co)**\n* **[AutoSync](http://autosync.io/#/course/Taq/0)** -- for live class notes \n\nHello, [Wrold](https://medium.com/@the_taqquikarim/console-log-hello-wrold-3e3abeb44396)! Welcome!\n\nIn this class, we will cover some of the basics of web development. This will include discussion on stuff like HTML, CSS and deployment to the web.\n\n### Objectives\n\n* write HTML from scratch\n* use CSS to style our HTML\n* deploy our page to the internet\n* understand bootstrap + other frontend frameworks\n\n### Topic Breakdown\n\n#### Setting up your environment\n1. Getting Started: set up your dev environment.\n2. Good to Knows: Sublime tricks + Newsletters.\n\n#### Guts of an HTML Request\n1. Internets, how does it work?!\n2. File structure, traversals, and you\n3. Let's create our first website (folder)\n\n#### All about HTML\n1. Basic HTML Structure\n2. Common HTML Tags\n3. How to Validate HTML\n\nBRB...\n\n----\n#### DEPLOY TO THE INTERNETS!!!\n----\nK, we're back.\n\n#### Styling with CSS\n1. Bro, do you even CSS?\n2. Putting your money where your .mouth is\n\n#### Frontend frameworks\n1. Building Websites Quickly with Bootstrap\n2. Bootstrap on steriods: bootstrapCDN, bootswatch, and fewd.us/zip\n\nHere's a panda sliding on things:\n\n![Pandas slide on things](https://media.giphy.com/media/AqZjlaUAjMRB6/giphy.gif)","idx":0},"another-one":{"content":"# Hello!!!\n---\n","idx":1},"setting-up-your-environment":{"content":"# Setting up your environment\n---\n\nPlease download and install the following programs if you haven't done so already:\n\n1. [Sublime Text](http://www.sublimetext.com/3) &mdash; we use this to write our programs\n\n2. [Chrome](http://www.google.com/chrome/?) &mdash; we use this to test our programs","idx":2},"guts-of-a-http-request":{"content":"\n## Guts of an HTML Request\n---\n\n### Question\nWhat happens when you type in [http://www.google.com](http://www.google.com) into the web browser?\n\n### Answer\nA **lot** of background tasks get executed.\n\n1. Browser has no idea what `google` is. It begins by looking up your web url in something called the **DNS**: the *Domain Name System*.\n2. The DNS maps to a specific **IP address**, a collection of numbers that works much like your phone number works.\n3. The browser now knows *where* to send a **HTTP request**. It does this.\n4. After a little while, a **response** comes back to the request sent. \n5. The browser parses this response and figures out what to do with this data (ie: should I draw it in the window? does this need to be download? Streamed? etc)\n6. **???**\n7. Profit\n\n### Question\n\nWhere does this response comes from?\n\n### Answer \n\nA little ol' thing called a **server**.\n\nServers are basically computers that have __one__ specific job: listen for requests from computers like yours. \n\nBased on the request, the server determines what to do: \n* should it respond at all? \n* Should it send back an image? \n* A video? \n* A webpage? \n* Etc.\n\n### Question\n\nWhy does it matter even? Why do __we__, aspiring web developers, even care what the server does?\n\n### Answer\n\nThe way a server stores data and responds to requests gives us valuable insight into how we can build websites of our own...in our own machines.\n\n","idx":3},"taking-a-peek-inside-a-server":{"content":"## Looking into the abyss...err, server \n---\n\nAt the end of the day, a server is **just a computer**...kinda like yours, only on steroids.\n\nMore importantly, a website is essentially **just a folder structure that contains a very specific set of files**.\n\nKinda like this:\n\n```html\nmyAwesomeFirstSite (folder)\n    assets (folder)\n        backgroundImage.jpg\n         ...\n         myDashingMug.png\n     styles (folder)\n         reset.css\n         ...\n         main.css\n     javsacript (folder)\n         main.js\n     index.html\n     about.html\n     contact.html\n```\n\nA few notes for you:\n\n1. **myAwesomeFirstSite** is the folder that will contain all the other folders that you need for your site to work\n2. note that our filenames and folder names have **NO spaces or any other funky business**. This is important! Just letters and numbers and underscores allowed! (Dashes are ok too but I recommend staying away from them).\n3. Inside our **myAwesomeFirstSite** folder, we have three other folders\n 1. **assets**: all website images should go here\n 2. **styles**: all your CSS files should go here\n 3. **javascript**: all your js files should go here\n\n\n### Question\n\nHow do we test our websites?\n\n### Question\n\nLet's deploy our first __thing__ to the interwebz!\n","idx":4},"intro-to-html":{"content":"# Bro: do you even HTML?\n---\n\nYour typical HTML file will look like this:\n\n```html\n<!doctype html>\n<html>\n <head>\n <!--\n the HEAD section of html does not have any content\n that the user can see\n\n instead, we place things like:\n page title\n external css links\n SEO keywords\n here\n -->\n <meta charset=\"utf-8\">\n <title>My First Awesome Site</title>\n </head>\n <body>\n <!--\n\n the BODY section will contain all the tags\n that the user can _SEE_ and _INTERACT_ with\n -->\n </body>\n</html>\n```\n\n**`<!doctype html>`**\n\nThis tag tells the browser to read our HTML content as HTML5, the latest and greatest revision of the HTML spec. We MUST include it as the first thing on our .html files. I usually type it as all lower case, but it's common practice to also type as: <!DOCTYPE html>\n\n**`<html>`**\n\nThis is the root tag. Basically, all other tags in your html file must live inside this tag. Note how on the bottom of the code snippet, we have a \"\". This is called closing a tag and we must close all tags that we open (with the exception of a few). If we do not do this, our HTML markup becomes invalid.\n\n**`<head>`**\n\nThis section contains content that does not show the user things. Typically, we would expect to see things such as the page title, external links, and SEO tags here.\n\n**`<body>`**\n\nAll the magic happens here. All the tags the user interacts with should live in this tag.\n\n## Commonly used HTML Tags\n\n```html\n<!--\n the h1 - or heading one - will have the most important text on page \n by the old guard, we should really only have one h1 per page\n -->\n <h1>Hello, Wrold</h1>\n\n <h2>This is a h2</h2>\n\n <h3>This is an h3</h3>\n\n <h4>This is an h4</h4>\n\n <h5>This is an h5</h5>\n\n <h6>This is an h6</h6> \n\n <!--\n this is an inline element\n unline the block element, which is meant to provide structure\n the inline element is interpreted as content\n this means that will appear next to one another\n -->\n <strong>This is an inline element</strong>\n <strong>This is another inline element</strong>\n\n <!-- this is a block element so it will NOT be on the same line -->\n <h1>Will this be on the same line?</h1>\n\n <!-- \n\n differences between block elements and inline elements\n block: takes up entire width of page unless otherwise told \n (we don't know how yet)\n we can impose dimensions on block elements\n inline: meant to be content or text\n we cannot impose dimensions on inline elements \n\n -->\n\n <!-- how to add more spaces or line breaks?? -->\n <h1>THIS will have many &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spaces</h1>\n\n <h1>This is <br> Sparta</h1>\n\n <a href=\"http://www.google.com\">Hello, Wrold I'm a link, yo</a>\n\n <!--\n this is one mode\n <tagName attribute1=\"someValue\" attribute2=\"someOtherValue\"></tagName>\n\n this is a self closing tag\n <tagName attribute1=\"someValue\" attribute2=\"someOtherValue\">\n --> \n\n <!--\n convention: \n external links open up in new tab\n absolute URLs\n\n internal links open up in same tab\n relative URLs\n -->\n\n <a href=\"http://www.google.com\" target=\"_blank\">Hello, Wrold I'm ALSO a link, yo</a>\n\n <em>This is an em</em>\n\n <p>This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.This is a paragraph.</p>\n\n <img src=\"http://placekitten.com/g/200/300\">\n <span>This is a kitten. S/he is cute.</span>\n\n <ul>\n <li>This is a list item <div></div></li>\n <li>This is another list item</li>\n <li>This is a third list item</li>\n </ul>\n\n <ol>\n <li>This is an ordered list item</li>\n <li>This is another ordered list item</li>\n <li>This is a third ordered list item</li>\n </ol>\n\n <div></div>\n\n <span></span>\n```\n\n### Exercise\n\nLet's build an \"About Me\" page.\n\n**Requirements**\n1. Have a bold heading that says \"All about [YOUR_NAME]\"\n2. Underneath it, do a quick paragraph introducing yourself\n3. Have an image of yourself (or a cat)\n4. Add some subheadings for:\n 1. Your favorite hobbies\n 2. Your favorite foods\n 3. Your favorite music\n5. Under each subheading, have a list that displays at least 3 items. Can be ordered or unordered.\n\n### Deploy!\n\n","idx":5},"styling-with-css":{"content":"# CSS and you\n---\n\nThink of CSS as a search engine. It's a method for searching your HTML tags efficiently and applying visual styles to the results it finds.\n\n### Definitions\n\n**selectors**: a keyword used to query your HTML. Comes in a few flavors:\n\n1. **tag selectors**: search your HTML by tagname\n2. **className selectors**: search your HTML by class attribute\n3. **id selectors**: search your HTML by ID attribute\n\n### PSETs\n\n1. [Tag Selectors](http://fewd.us/jargon/#/problem/4678)\n2. [Class Selectors](http://fewd.us/jargon/#/problem/4680)\n3. [ID Selectors](http://fewd.us/jargon/#/problem/4685)\n4. [More Class Selectors](http://fewd.us/jargon/#/problem/4934)\n5. [Multiple Class Selectors](http://fewd.us/jargon/#/problem/4679)\n6. [Complext Selectors](http://fewd.us/jargon/#/problem/4688)\n\n### Specificity\n\nNot all selectors are created equal!\n\nGeneral specificity rules:\n\n* **tag selectors**: 1\n* **class selectors**: 10\n* **id selectors**: Infinity\n\nYou can calculate the specificity of selectors by adding all the individual values.\n\nFor example\n```css\nbody.my-class#my-id {\n/*  has a specificity of: 111 */\n}\n``` \n\n### PSETs\n\n1. [Problem 1](http://fewd.us/jargon/#/problem/4936)\n2. [Problem 2](http://fewd.us/jargon/#/problem/4935)\n\n### Exercise\n\nTake your HTML website from before and style it. Add colors, backgrounds, etc. It's ok if this is hideous, we will improve this next section.\n\n### Deploy!\n","idx":6},"frontend-frameworks":{"content":"# Frameworks\n---\n\nFrameworks are basically CSS stylesheets that were developed by other people. They are built in such a way that you don't have to spend time and energy building out commonly reusable components like **buttons** and **input fields**, etc\n\n## Bootstrap\n---\n\nSome quick facts:\n\n* Built by your boys over @twitter, it is a framework for quickly building out complex webpages\n* They write the CSS and HTML blocks for you, all you do is copy and paste\n* With a basic understanding of HTML/CSS, you can easily start building professional looking websites\n\n**Visit their [website](http://getbootstrap.com/).**\n\n**Read the [docs](http://getbootstrap.com/getting-started/).**\n\n## Primer\n---\n\nSome quick facts:\n\n* Build by your boys over @github\n* Much simpler than bootstrap\n* Lighter weight too!\n\n**Visit their [website](http://primercss.io/).**\n\n### Exercise\n\nTake your CSS-ified About Me page and add a layout to it with Primer. Feel free to use other page elements that you see fit to make your page more attractive.\n\n### Deploy\n\n","idx":7},"__list__":["home","another-one","setting-up-your-environment","guts-of-a-http-request","taking-a-peek-inside-a-server","intro-to-html","styling-with-css","frontend-frameworks"]}